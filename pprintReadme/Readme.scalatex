@import Main._
@a(
  href := "https://github.com/lihaoyi/upickle-pprint",
  img(
    position.absolute,
    top := 0,
    right := 0,
    border := 0,
    src := "https://camo.githubusercontent.com/365986a132ccd6a44c23a9169022c0b5c890c387/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f7265645f6161303030302e706e67",
    alt := "Fork me on GitHub",
    data.`canonical-src` := "https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png"
  )
)
@sect{PPrint}
  @img(
    src := "Example.png",
    alt := "Example use case of PPrint",
    height := 767,
    marginLeft.auto,
    marginRight.auto,
    display.block
  )
  @p
    PPrint is a module that lets you easily print data structures in a form that is more convenient to use both visually and programmatically. Unlike a traditional @hl.scala{.toString}, PPrint...

  @ul
    @li
      Prints many common data structures in a source-code-compatible way (e.g. strings are escaped), that you can paste directly into a console or REPL to evaluate
    @li
      Things are laid out nicely! Vertically spaced out and properly indented, instead of being all squashed onto one line.
    @li
      Pretty-printed output can be colored for easy viewing!
    @li
      Pretty-printing is @sect.ref("Streaming", "streaming"), meaning you can pretty-print extremely large data structures and stream it to stdout/files/logging without having to materialize the whole string in memory.
    @li
      Pretty-printing is configurable, so you can configure maximum widths for wrapping, maximum heights for truncation, and other such things.
  @sect{Getting Started}
    @p
      Add the following to your SBT config:
    @hl.scala
      libraryDependencies += "com.lihaoyi" %% "pprint" % "@upicklePPrint.Constants.version"
    @p
      Or for Scala.js:
    @hl.scala
      libraryDependencies += "com.lihaoyi" %%% "pprint" % "@upicklePPrint.Constants.version"
    @p
      The above example then showed how to use the default pprint configuration. You can also set up your own custom implicit `pprint.Config` if you want to control e.g. colors, width, or max-height of the output.
    @p
      The three main methods you need to care about are:

    @ul
      @li
        @hl.scala{pprint.pprintln(value: T): Unit}: pretty-prints the given value to the console
      @li
        @hl.scala{pprint.log(value: T, tag="optional"): Unit}: pretty-prints the given value to the console along with debugging information (class-name, method-name, line-number, an optional tag) to make it easy to find your prints again later. If you're finding yourself putting many debug prints in different files, this makes it much easier to keep them straight
      @li
        @hl.scala{pprint.tokenize(value: T): Iterator[String]}: same as @hl.scala{pprint.pprintln}, except instead of dumping to standard output it returns an iterator you can consume or pass around to use at your leisure.
      @li
        @hl.scala{pprint.stringify(value: T): String}: same as @hl.scala{pprint.pprintln}, except instead of dumping to standard output it returns a string.

    @p
      You can of course define your own custom methods if you want to e.g. always log to a log file or some third-party service, or if you want your own custom set of debug information to be printed (instead of what @code{.log} provides). See the short @lnk("implementation of these methods", "https://github.com/lihaoyi/upickle-pprint/blob/master/pprint/shared/src/main/scala/pprint/package.scala#L1") if you want ideas on how to write your own versions.

    @p
      Pretty-printing is by default defined for most standard library types, as well as case classes and case objects. For other types not supported, it falls back to using @hl.scala{toString}

    @hl.scala
      scala> pprint.pprintln(new Object())
      java.lang.Object@@54f880c0

    @p
      You can configure the pretty-printing by defining your own implicit @hl.scala{Config} object, to consistently set things like maximum width, height or colors across a codebase. However, if you just want to set these things one-off, you can do that too:

    @hl.scala
        scala> pprint.pprintln(Seq(1, 2, 3))
        List(1, 2, 3)

        scala> pprint.pprintln(Seq(1, 2, 3), width = 5) // force wrapping
        List(
          1,
          2,
          3
        )

        scala> pprint.pprintln(Seq(1, 2, 3), width = 6, height = 2) // truncate
        List(
          1,
        ...
    @p
      PPrint also provides the @code{pprint.log} function, which automatically adds some context so you can find your printouts later:
    @hl.scala
      scala> class Foo{
           |   def bar(grid: Seq[Seq[Int]]) = {
           |     pprint.log(grid, tag="grid")
           |   }
           | }
      defined class Foo

      scala> new Foo().bar(Seq(0 until 10, 10 until 20, 20 until 30))
      pkg.Foo#bar "grid":12
      List(
        Range(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
        Range(10, 11, 12, 13, 14, 15, 16, 17, 18, 19),
        Range(20, 21, 22, 23, 24, 25, 26, 27, 28, 29)
      )
    @p
      Note how the package name, class name, and method name, along with the optional @code{tag}. are all formatted nicely for you to read. This should make it much easier for you to find each individual print later. Just like `pprint.pprintln`, the output is nicely formatted across multiple lines and syntax-highlighted for readability.

  @sect{Streaming}

    @p
      PPrint is lazy and streaming. Unlike @hl.scala{println(x.toString)} which marshals the entire string in memory before returning it:

    @hl.scala
      scala> val large = Seq.fill(100000)("ABCDE" * 1000)
      scala> println(large.toString)
      java.lang.OutOfMemoryError: Java heap space

    @p
      @hl.scala{pprint.pprintln} streams the result to standard output, meaning that even for enormous data structures like the one above you can immediately start seeing output:

    @hl.scala
      scala> pprint.pprintln(large)
      Seq(
        "ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEA
        BCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABC
        ...

    @p
      For example, if you have a massive (or even infinite!) data structure and wish to only show a certain amount of it, truncating it is straightforward:

    @hl.scala
      scala> val large = Seq.tabulate(100000)("ABCDE" + _)

      scala> pprint.pprintln(large, height=20)
      List(
        "ABCDE0",
        "ABCDE1",
        "ABCDE2",
        "ABCDE3",
        "ABCDE4",
        "ABCDE5",
        "ABCDE6",
        "ABCDE7",
        "ABCDE8",
        "ABCDE9",
        "ABCDE10",
        "ABCDE11",
        "ABCDE12",
        "ABCDE13",
        "ABCDE14",
        "ABCDE15",
        "ABCDE16",
        "ABCDE17",
        "ABCDE18",
      ...

    @p
      If you want to do something else with the streaming output apart from displaying it on the console, you can also call @hl.scala{PPrint.tokenize}

    @hl.scala
      scala> val large = Seq.fill(100000)("ABCDE" * 1000)
      scala> pprint.PPrint.tokenize(large)
      res0: Iterator[String] = non-empty iterator

    @p
      This gives you an iterator with which you can do whatever you want: stream it to a file, to your logging system, etc.. Even for extremely large data structures, you can use this data structure to page through it and see what it contains without ever materializing the entire string in memory.

  @sect{Customization}

    @p
      In order to pretty print a type @hl.scala{T}, you need to have a @hl.scala{T: PPrint} context bound present. In order to write your own custom pretty printer for some type @hl.scala{T}, provide an implicit @hl.scala{PPrinter[T]} in scope.

  @sect{TPrint}
    @p
      Apart from pretty-printing values, PPrint also allows you to pretty-print types with the @hl.scala{pprint.tprint} function:

    @img(
      src := "TPrint.png",
      alt := "Example use case of TPrint",
      height := 427,
      marginLeft.auto,
      marginRight.auto,
      display.block
    )

    @p
      Apart from calling @hl.scala{tprint} yourself, you can also add an implicit @hl.scala{TPrint[T]} param to a function with a type-parameter @hl.scala{T} and use @hl.scala{TPrint[T]#render(cfg: Config)} to pretty-print a type. This is handy if you want to write type-printing functionality to an existing function.

    @p
      Like value pretty-printing, the colors can be configured by the @hl.scala{pprint.Config}, with @hl.scala{import pprint.Config.Colors._} for colored type-printing and @hl.scala{import pprint.Config.BlackWhite._} for non-colored type-printing. You can also provide your own implicit @hl.scala{TPrint[T]} values if you want to customize the type printing of a particular type.

    @img(
      src := "TPrintCustom.png",
      alt := "Example use case of Custom TPrint",
      height := 359,
      marginLeft.auto,
      marginRight.auto,
      display.block
    )
  @sect{Version History}
    @sect{0.4.1}
      @ul
        @li
          Updating PPrint to use the [Fansi](https://github.com/lihaoyi/fansi) library for dealing with colors, instead of `Console.*`
    @sect{0.4.0}
      @ul
        @li
          Added @sect.ref{TPrint} implicit, which can be materialized for any type to get a nicely-formatted, colored version of the type @code{T}s normal @code{toString}


    @sect{0.3.9}
      @ul
        @li
          Tweaks to @hl.scala{pprint.log} to make it less verbose, added @hl.scala{pprint.log2} with the old behavior and verbosity.
    @sect{0.3.8}
      @ul
        @li
          Robustify PPrint macros slightly against crashes @a("Ammonte#198", href:="https://github.com/lihaoyi/Ammonite/issues/198") and @a("doobie#258", href:="https://github.com/tpolecat/doobie/issues/258")

        @li
          Added the @hl.scala{pprint.log} function, for convenient no-setup console logging and debugging
    @sect{0.3.7}
      @ul
        @li
          Case-classes providing custom @hl.scala{.toString} methods now use those instead of the macro-generated pretty-printer (#115)
        @li
          @hl.scala{pprint.tokenize} now takes the default @code{Config} by default, thus removing the need for a special import, just like @code{pprint.pprint} does
        @li
          Slightly improve hygiene of uPickle/PPrint macro expansion
    @sect{0.3.6}
      @ul
        @li
          Fix more bugs in PPrint derivation
    @sect{0.3.5}
      @ul
        @li
          Fix some bugs in PPrint derivation
    @sect{0.3.4}
      @ul
        @li
          Remove unnecessary shapeless dependency
    @sect{0.3.3}
      @ul
        @li
          Fix more edge cases to avoid diverging implicits
    @sect{0.3.2}
      @ul
        @li
          Fix compiler crash on pretty-printing @hl.scala{akka.http.Http.ServerBinding}
        @li
          Made pretty-print work for inferred type @hl.scala{Nothing}
    @sect{0.3.1}
      @ul
        @li
          Fixed edge cases around typeclass derivation
    @sect{0.3.0}
      @ul
        @li
          First release outside of the Ammonite project where this lived for a long time
        @li
          Shared case-class implicit-derivation back-end with uPickle, greatly expanding the scope of things that can be prettyprinted
